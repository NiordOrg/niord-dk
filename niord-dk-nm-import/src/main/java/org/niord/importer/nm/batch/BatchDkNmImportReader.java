/* Copyright (c) 2011 Danish Maritime Authority
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.niord.importer.nm.batch;

import org.niord.core.batch.AbstractItemHandler;
import org.niord.importer.nm.LegacyNmImportRestService.ImportNmParams;
import org.niord.importer.nm.extract.NmHtmlExtractor;

import javax.inject.Named;
import java.io.Serializable;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

import static org.niord.importer.nm.LegacyNmImportRestService.getImportNmParams;

/**
 * Imports a list of legacy NM messages from HTML file generated by saving an NM Word document as HTML.
 * <p>
 * Please note, the actual dk-nm-import.xml job file is not placed in the META-INF/batch-jobs of this project,
 * but rather, in the META-INF/batch-jobs folder of the niord-web project.<br>
 * This is because of a class-loading bug in the Wildfly implementation. See e.g.
 * https://issues.jboss.org/browse/WFLY-4988
 */
@Named
public class BatchDkNmImportReader extends AbstractItemHandler {

    ImportNmParams importParams;
    List<Integer> dummyData = Arrays.asList(1, 2, 3, 4, 5);
    int nmNo = 0;

    /** {@inheritDoc} **/
    @Override
    public void open(Serializable prevCheckpointInfo) throws Exception {

        // Load the import params from the batch properties
        importParams = getImportNmParams(job.readProperties());

        // Extract messages from the HTML
        Path path = batchService.getBatchJobDataFile(jobContext.getInstanceId());
        NmHtmlExtractor extractor = new NmHtmlExtractor(path.toFile());

        getLog().info("Parsing NMs for year " + extractor.getYear() +  ", week " + extractor.getWeek());
        extractor.extractNms();

        if (prevCheckpointInfo != null) {
            nmNo = (Integer) prevCheckpointInfo;
        }

        getLog().info("Start processing " + dummyData.size() + " legacy NMs from index " + nmNo);
    }

    /** {@inheritDoc} **/
    @Override
    public Object readItem() throws Exception {
        if (nmNo < dummyData.size()) {

            // Every now and then, update the progress
            if (nmNo % 10 == 0) {
                updateProgress((int)(100.0 * nmNo / dummyData.size()));
            }

            getLog().info("Reading legacy NM no " + nmNo);
            return dummyData.get(nmNo++);
        }
        return null;
    }

    /** {@inheritDoc} **/
    @Override
    public Serializable checkpointInfo() throws Exception {
        return nmNo;
    }

}
